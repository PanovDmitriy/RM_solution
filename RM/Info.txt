State:

Entry Action - Действие при входе в состояние.
Exit Action - Действие при выходе из состония.
1. Может быть синхронным или асинхронным (т.е. отложить/заморозить все действия с состонияем до завершения действия - синхронное; или инициировать действия, которое будет происходить параллельно с возможным изменением состояния - асинхронное)
2. не может быть прервано событием (т.е. действие будет выполнено вне зависимости от изменения состояния)

Internal Action - Дейсвие внутри состония.
1. Начинается сразу после Entry Action
2. Всегда асинхронное (т.е. дейсвие в Internal Action не влияет на возможность изменения состояния)
3. Может быть прервано событием (событие инициирующее выход из состония)

--------------------------------------

Pseudostate:
Без всех Actions.

------------------------

DOM -> RM::RiseEvent(event)
RM::RiseEvent(event) -> RM::RuleList::RiseEvent(event)
SM::RiseEvent(event) -> AddToQueue(event)

DOM::MainLoop -> RM::ReleaseEvent()
RM::ReleaseEvent() -> RM::RuleList::ReleaseEvent()
SM::ReleaseEvent() -> SM::EventQueue::InsideReleaseEvent(event)

--------------------------

transition: source state (исходное состояние), trigger (переключающее событие), guard condition, target state (целевое состояние)
trigger (переключающее событие)

pseudostate (псевдосостояние): history state; initial state; junction state; stub state.

-----------------------------

internal transition (внутренний переход) 
Обрабатывает событие, но не изменяет состояние (в том числе, не вызывает entry / exit actions)
Отсутствует в принцепе, т.к. это упрощение композитного сосотояния, т.е. параллельного автомата.

---------------------------------

timeout event | transition

-------------------------------------

в общем смысле, имя Состояния (оно должно быть уникальным в системе) - это адрес объекта state. Т.е. имя состояния в нотации - это указатель на на объект состояния в программировании.
Именно поэтому обращение к Состояниям через указатели, т.е. через имена (?)
с другой стороны, адрес - это имя конкретного экземпляра. Нужно ли имя типа?
В этом разница с событием - там нет имени экземпляра, там есть имя типа.
Вовремя и правильно различай тип, переменную типа и значение переменной!

-------------------------


